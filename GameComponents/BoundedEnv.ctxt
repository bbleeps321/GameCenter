#BlueJ class context
comment0.params=width\ height\ cellWidth\ cellHeight
comment0.target=BoundedEnv(int,\ int,\ double,\ double)
comment0.text=\nCreates\ a\ bounded\ environment\ with\ the\ specified\ number\ of\ \nwidth\ and\ height\ in\ cells.\n\n
comment1.params=obj
comment1.target=void\ add(Locatable)
comment1.text=\nAdds\ the\ specified\ Locatable\ object\ to\ the\ environment\ .\n\n
comment10.target=double\ cellHeight()
comment10.text=\nReturns\ the\ height\ of\ a\ single\ cell.\n\n
comment11.params=loc
comment11.target=Locatable\ objectAt(Location)
comment11.text=\nReturns\ the\ locatable\ object\ at\ the\ specified\ location.\n\n
comment12.params=loc\ dir
comment12.target=Location\ neighborOf(Location,\ Direction)
comment12.text=\nReturns\ the\ location\ that\ is\ adjacent\ to\ the\ specified\ one\ \nin\ the\ given\ direction.\n\n
comment13.params=loc
comment13.target=ArrayList<Location>\ emptyNeighbors(Location)
comment13.text=\nReturns\ an\ ArrayList\ of\ valid,\ empty\ locations\ adjacent\ to\ the\ \nspecified\ one.\n\n
comment14.params=loc
comment14.target=ArrayList<Location>\ getNeighbors(Location)
comment14.text=\nReturns\ an\ ArrayList\ of\ valid\ locations\ adjacent\ to\ the\ \nspecified\ one.\n\n
comment15.params=loc
comment15.target=ArrayList<Location>\ getNeighbors8(Location)
comment15.text=\nReturns\ an\ ArrayList\ of\ valid\ locations\ adjacent\ to\ the\ \nspecified\ one,\ both\ directly\ and\ diagonally.\n\n
comment16.params=obj\ oldLoc
comment16.target=void\ recordMove(Locatable,\ Location)
comment16.text=\nUpdates\ the\ grid\ for\ the\ location\ of\ the\ specified\ \nLocatable\ object.\n\n
comment17.params=loc1\ loc2
comment17.target=boolean\ areSame(Location,\ Location)
comment17.text=\nReturns\ whether\ or\ not\ the\ objects\ at\ the\ two\ locations\ are\ \nof\ the\ same\ type\ (same\ class/superclass).\n\n
comment18.params=loc1\ loc2
comment18.target=int\ distance(Location,\ Location)
comment18.text=\nReturns\ the\ distance\ between\ the\ two\ locations\ in\ cells.\n\n
comment19.params=loc1\ loc2
comment19.target=double\ angleRad(Location,\ Location)
comment19.text=\nReturns\ the\ angle\ measure\ between\ the\ two\ locations\ in\ radians.\n\n
comment2.params=obj
comment2.target=void\ remove(Locatable)
comment2.text=\nRemoves\ the\ specified\ Locatable\ object\ from\ the\ environment.\n\n
comment20.params=x
comment20.target=double\ doubleX(int)
comment20.text=\nReturns\ the\ double\ x\ coordinate\ of\ the\ location\ at\ the\ \nspecified\ cell.\n\n
comment21.params=y
comment21.target=double\ doubleY(int)
comment21.text=\nReturns\ the\ double\ y\ coordinate\ of\ the\ location\ at\ the\ \nspecified\ cell.\n\n
comment22.params=x
comment22.target=int\ cellX(double)
comment22.text=\nReturns\ the\ x\ coordinate\ of\ the\ location\ in\ the\ environment\ \nthat\ the\ specified\ double\ coordinate\ is\ in.\n\n
comment23.params=y
comment23.target=int\ cellY(double)
comment23.text=\nReturns\ the\ y\ coordinate\ of\ the\ location\ in\ the\ environment\ \nthat\ the\ specified\ double\ coordinate\ is\ in.\n\n
comment24.params=x\ y
comment24.target=Location\ toLocation(double,\ double)
comment24.text=\nReturns\ the\ Location\ that\ corresponds\ to\ the\ x,y\ double\ coordinates.\n\n
comment25.target=BoundedEnv\ copy()
comment25.text=\nReturns\ a\ copy\ of\ this\ environment.\n\n
comment26.target=ArrayList<Locatable>\ allObjects()
comment26.text=\nReturns\ an\ arraylist\ of\ all\ the\ locatable\ objects\ in\ the\ environment.\n\n
comment27.target=ArrayList<Location>\ allEmptyLocations()
comment27.text=\nReturns\ an\ arraylist\ of\ all\ the\ empty\ locations\ in\ the\ environment.\n\n
comment28.params=obj
comment28.target=boolean\ contains(Locatable)
comment28.text=\nReturns\ whether\ or\ not\ the\ environment\ contains\ the\ given\ object.\n\n
comment29.params=loc1\ loc2
comment29.target=Direction\ getDirection(Location,\ Location)
comment29.text=\nReturns\ the\ direction\ that\ would\ need\ to\ be\ traveled\ to\ go\ \nfrom\ loc1\ to\ loc2.\ If\ the\ locations\ do\ not\ share\ any\ row\ or\ \ncolumn,\ will\ return\ the\ direction\ that\ will\ bring\ it\ closest.\nReturns\ null\ if\ the\ locations\ are\ the\ same.\n\n
comment3.params=loc
comment3.target=void\ remove(Location)
comment3.text=\nClears\ the\ object\ at\ the\ given\ location\ of\ whatever\ object\ \nit\ may\ contain.\n\n
comment30.params=start\ end
comment30.target=ArrayList<Location>\ getPath(Location,\ Location)
comment30.text=\nReturns\ a\ path\ (ArrayList\ of\ locations\ in\ order)\ from\ \nstart\ to\ end\ that\ manuevers\ around\ the\ objects\ in\ the\ \ \nenvironment,\ ignoring\ the\ last\ location\ it\ just\ checked.\ \nReturns\ null\ if\ no\ path\ can\ be\ found.\ The\ path\ returned\ \nis\ in\ order,\ including\ the\ starting\ and\ ending\ locations.\n\n
comment31.params=start\ end\ ignoreString
comment31.target=ArrayList<Location>\ getPath(Location,\ Location,\ String[])
comment31.text=\nReturns\ a\ path\ (ArrayList\ of\ locations\ in\ order)\ from\ \nstart\ to\ end\ that\ manuevers\ around\ the\ objects\ in\ the\ \ \nenvironment,\ ignoring\ the\ last\ location\ it\ just\ checked\ \nand\ all\ objects\ of\ the\ specified\ type.\ Returns\ null\ if\ \nno\ path\ can\ be\ found.\ The\ path\ returned\ is\ in\ order,\ \nincluding\ the\ starting\ and\ ending\ locations.\n\n
comment32.target=String\ toString()
comment32.text=\nReturns\ a\ String\ representation\ of\ the\ environment.\n\n
comment4.target=int\ numObjects()
comment4.text=\nReturns\ the\ number\ of\ objects\ contained\ in\ the\ environment.\n\n
comment5.params=loc
comment5.target=boolean\ isValid(Location)
comment5.text=\nReturns\ whether\ or\ not\ the\ specified\ location\ is\ valid.\n\n
comment6.params=loc
comment6.target=boolean\ isEmpty(Location)
comment6.text=\nReturns\ whether\ or\ not\ the\ specified\ location\ is\ empty.\nReturns\ false\ if\ the\ location\ is\ not\ empty\ or\ invalid.\n\n
comment7.target=int\ width()
comment7.text=\nReturns\ the\ width\ of\ the\ environment\ in\ cells.\n\n
comment8.target=int\ height()
comment8.text=\nReturns\ the\ height\ of\ the\ environment\ in\ cells.\n\n
comment9.target=double\ cellWidth()
comment9.text=\nReturns\ the\ width\ of\ a\ single\ cell.\n\n
numComments=33
